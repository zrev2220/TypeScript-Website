{"componentChunkName":"component---src-templates-tsconfig-option-one-page-tsx","path":"/tsconfig/moduleResolution.html","result":{"pageContext":{"title":"moduleResolution","lang":"en","html":"<p>Specify the module resolution strategy:</p>\n<ul>\n<li><code>'node16'</code> or <code>'nodenext'</code> for modern versions of Node.js. Node.js v12 and later supports both ECMAScript imports and CommonJS <code>require</code>, which resolve using different algorithms. These <code>moduleResolution</code> values, when combined with the corresponding <a href=\"#module\"><code>module</code></a> values, picks the right algorithm for each resolution based on whether Node.js will see an <code>import</code> or <code>require</code> in the output JavaScript code.</li>\n<li><code>'node10'</code> (previously called <code>'node'</code>) for Node.js versions older than v10, which only support CommonJS <code>require</code>. You probably wonâ€™t need to use <code>node10</code> in modern code.</li>\n<li><code>'bundler'</code> for use with bundlers. Like <code>node16</code> and <code>nodenext</code>, this mode supports package.json <code>\"imports\"</code> and <code>\"exports\"</code>, but unlike the Node.js resolution modes, <code>bundler</code> never requires file extensions on relative paths in imports.</li>\n<li><code>'classic'</code> was used in TypeScript before the release of 1.6. <code>classic</code> should not be used.</li>\n</ul>\n<p>There is a handbook reference page on <a href=\"/docs/handbook/module-resolution.html\">Module Resolution</a></p>","redirectHref":"/tsconfig#moduleResolution"}},"staticQueryHashes":[]}